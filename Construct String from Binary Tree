# Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it. Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.

# Example: Input: root = [1,2,3,4] -> Output: "1(2(4))(3)" -> Explanation: Originally, it needs to be "1(2(4)())(3()())", but you need to omit all the unnecessary empty parenthesis pairs. And it will be "1(2(4))(3)"

# 12/04/23 -> No edits
# 13/04/23 -> No edits
# 15/04/23 -> No edits
# 16/04/23 -> No edits
# 17/04/23 -> No edits


class Solution:
    def tree2str(self, root: Optional[TreeNode]) -> str:
        if not root:
            return ""  # base case: empty tree
        
        left = self.tree2str(root.left)
        right = self.tree2str(root.right)
        
        if left == "" and right == "":
            return str(root.val)
        elif left == "":
            return str(root.val) + "()" + "(" + right + ")"
        elif right == "":
            return str(root.val) + "(" + left + ")"
        else:
            return str(root.val) + "(" + left + ")" + "(" + right + ")"
